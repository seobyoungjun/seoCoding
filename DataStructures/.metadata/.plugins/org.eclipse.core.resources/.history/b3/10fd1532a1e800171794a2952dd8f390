import java.util.Scanner;

public class EqualStacks {
	static int n1m = 0, n2m = 0, n3m = 0;
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n1 = in.nextInt();
		int n2 = in.nextInt();
		int n3 = in.nextInt();
		
		int h1[] = new int[n1];
		for (int h1_i = 0; h1_i < n1; h1_i++) {
			h1[h1_i] = in.nextInt();
			n1m += h1[h1_i];
			
		}
		int h2[] = new int[n2];
		for (int h2_i = 0; h2_i < n2; h2_i++) {
			h2[h2_i] = in.nextInt();
			n2m += h1[h2_i];
		}
		int h3[] = new int[n3];
		for (int h3_i = 0; h3_i < n3; h3_i++) {
			h3[h3_i] = in.nextInt();
			n3m += h1[h3_i];
		}
		System.out.println(n1m);
		System.out.println(n2m);
		System.out.println(n3m);
		System.out.println(recursivePop(n1, n2, n3, n1m, n2m, n3m, h1, h2, h3));
		
	}
	public static int recursivePop(int n1, int n2, int n3, int n1m, int n2m, int n3m, int[] h1, int[] h2, int[] h3){
		if(n1m == n2m && n2m == n3m){
			return n1m;
		}else{
			if(n1m > n2m)
				if(n1m > n3m)
					recursivePop(n1-1, n2, n3, n1m-h1[n1], n2m, n3m, h1, h2, h3);
				else
					if(n3m > n2m)
						recursivePop(n1, n2, n3-1, n1m, n2m, n3m-h3[n3], h1, h2, h3);
					else
						recursivePop(n1, n2-1, n3, n1m, n2m-h2[n2], n3m, h1, h2, h3);
			else
				if(n2m > n3m)
					recursivePop(n1, n2-1, n3, n1m, n2m-h2[n2], n3m, h1, h2, h3);
				else
					if(n3m > n1m)
						recursivePop(n1, n2, n3-1, n1m, n2m, n3m-h3[n3], h1, h2, h3);
					else
						recursivePop(n1-1, n2, n3, n1m-h1[n1], n2m, n3m, h1, h2, h3);
		}
		return 0;
	}
}
