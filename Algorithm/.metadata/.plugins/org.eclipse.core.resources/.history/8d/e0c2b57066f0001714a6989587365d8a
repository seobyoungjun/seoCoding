//https://www.hackerrank.com/challenges/bfsshortreach/problem

import java.util.Scanner;

public class BreadthFirstSearch_ShortestReach {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int q = in.nextInt();
		for (int a0 = 0; a0 < q; a0++) {
			int n = in.nextInt();

			int[][] board = new int[n + 1][n + 1];

			int m = in.nextInt();
			for (int a1 = 0; a1 < m; a1++) {
				int u = in.nextInt();
				int v = in.nextInt();
				board[u][v] = 1;
				board[v][u] = 1;
				for (int i = 1; i < n + 1; i++) {
					//u를 기준으로 연결되어있는 가중치를 고려하여 v를 새로 고쳐줘야한다.
					if (u != i && v != i && board[u][i] > 0) {
						int count = board[u][i];
						if(count + 1 < board[v][i] || board[v][i] == 0){
							board[v][i] = count + 1;
							board[i][v] = count + 1;
						}
					}else if (u != i && v != i && board[v][i] > 0) {
						int count = board[v][i];
						if(count + 1 < board[u][i] || board[u][i] == 0){
							board[u][i] = count + 1;
							board[i][u] = count + 1;
						}
					}
				}
			}
			int s = in.nextInt();

			for (int i = 1; i < n + 1; i++)
				if (s != i) {
					if (board[s][i] > 0) {
						System.out.printf("%d ", board[s][i] * 6);
					} else {
						System.out.printf("%d ", -1);
					}
				}
			System.out.println();

		}
		in.close();
	}

}
